/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * ShowPanel.java
 *
 * Created on 25/01/2013, 11:39:37 AM
 */
package tv;

import java.io.File;
import java.io.IOException;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import org.apache.commons.io.FileUtils;

/**
 *
 * @author Trent
 */
public class ShowPanel extends javax.swing.JPanel {
    private Show show;
    /** Creates new form ShowPanel */
    public ShowPanel(Show show) {
        this.show = show;
        initComponents();
        updatePanel();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnUp1 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        lstQueue = new javax.swing.JList();
        txtShowLength = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        txtDirectory = new javax.swing.JTextField();
        btnBrowse = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        txtNextEpisode = new javax.swing.JTextField();
        btnNextEpisode = new javax.swing.JButton();
        btnUp = new javax.swing.JButton();
        btnDown = new javax.swing.JButton();
        btnRandomise = new javax.swing.JButton();
        btnSort = new javax.swing.JButton();
        btnQueueUp = new javax.swing.JButton();
        btnQueueDown = new javax.swing.JButton();
        btnAdd = new javax.swing.JButton();
        btnRemove = new javax.swing.JButton();

        btnUp1.setText("↑");

        lstQueue.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                doubleClick(evt);
            }
        });
        jScrollPane1.setViewportView(lstQueue);

        txtShowLength.setEditable(false);

        jLabel1.setText("Show length (half hours)");

        jLabel2.setText("Show directory");

        txtDirectory.setEditable(false);

        btnBrowse.setText("Browse...");
        btnBrowse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBrowseActionPerformed(evt);
            }
        });

        jLabel3.setText("Next episode");

        txtNextEpisode.setEditable(false);

        btnNextEpisode.setText("Set Next Episode");
        btnNextEpisode.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNextEpisodeActionPerformed(evt);
            }
        });

        btnUp.setText("↑");
        btnUp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpActionPerformed(evt);
            }
        });

        btnDown.setText("↓");
        btnDown.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDownActionPerformed(evt);
            }
        });

        btnRandomise.setText("Randomise Queue");
        btnRandomise.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRandomiseActionPerformed(evt);
            }
        });

        btnSort.setText("Sort Queue");
        btnSort.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSortActionPerformed(evt);
            }
        });

        btnQueueUp.setText("↑");
        btnQueueUp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnQueueUpActionPerformed(evt);
            }
        });

        btnQueueDown.setText("↓");
        btnQueueDown.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnQueueDownActionPerformed(evt);
            }
        });

        btnAdd.setText("Add to Queue");
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });

        btnRemove.setText("Remove from Queue");
        btnRemove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoveActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 699, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(txtDirectory, javax.swing.GroupLayout.DEFAULT_SIZE, 352, Short.MAX_VALUE)
                            .addComponent(txtNextEpisode, javax.swing.GroupLayout.DEFAULT_SIZE, 352, Short.MAX_VALUE)
                            .addComponent(txtShowLength, javax.swing.GroupLayout.DEFAULT_SIZE, 352, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(btnBrowse, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btnUp, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnDown, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(btnNextEpisode, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(btnQueueUp)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnQueueDown)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnRandomise)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnSort)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnRemove)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnAdd))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtShowLength, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnUp)
                    .addComponent(btnDown)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnBrowse)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(txtDirectory, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel2)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnNextEpisode)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(txtNextEpisode, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel3)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnRandomise)
                    .addComponent(btnSort)
                    .addComponent(btnAdd)
                    .addComponent(btnQueueUp)
                    .addComponent(btnQueueDown)
                    .addComponent(btnRemove))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnBrowseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBrowseActionPerformed
        String originalDirectory = show.getRootDirName();
        JFileChooser fc = new JFileChooser();
        fc.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        fc.setMultiSelectionEnabled(false);
        fc.setSelectedFile(new File(originalDirectory));

        if (fc.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
                File file = fc.getSelectedFile();
                try {
                    if (file.getCanonicalPath().equals(originalDirectory)) {
                        return;
                    }
                    show.loadEpisodes(file.getCanonicalPath());
                    updatePanel();
                }
                catch (IOException e) {
                    JOptionPane.showMessageDialog(this, "An error occured while accessing the file", "Error", JOptionPane.ERROR_MESSAGE);
                    return;
                }
        }
    }//GEN-LAST:event_btnBrowseActionPerformed

    private void btnNextEpisodeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNextEpisodeActionPerformed
        setNextEpisode((String)lstQueue.getSelectedValue());
    }//GEN-LAST:event_btnNextEpisodeActionPerformed

    private void btnUpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpActionPerformed
        if (show.getTimeSlotLength() < 7*24*2) {
            show.setTimeSlotLength(show.getTimeSlotLength()+1);
            txtShowLength.setText(Integer.toString(show.getTimeSlotLength()));
        }
    }//GEN-LAST:event_btnUpActionPerformed

    private void btnDownActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDownActionPerformed
        if (show.getTimeSlotLength() > 1) {
            show.setTimeSlotLength(show.getTimeSlotLength()-1);
            txtShowLength.setText(Integer.toString(show.getTimeSlotLength()));
        }
    }//GEN-LAST:event_btnDownActionPerformed

    private void doubleClick(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_doubleClick
        if (evt.getClickCount() == 2) {
            setNextEpisode((String)lstQueue.getSelectedValue());
        }
    }//GEN-LAST:event_doubleClick

    private void btnQueueUpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnQueueUpActionPerformed
        int episodeToMove = lstQueue.getSelectedIndex();
        String episodeName = (String) lstQueue.getSelectedValue();
        String nextEpisode = (String) lstQueue.getModel().getElementAt(0);
        
        int episodeToFollow = episodeToMove - 1;
        if (episodeToFollow <= 0) {
            episodeToFollow = 0;
        }
        show.moveEpisodeBefore((String) lstQueue.getModel().getElementAt(episodeToMove), (String) lstQueue.getModel().getElementAt(episodeToFollow));

        setNextEpisode(nextEpisode);
        lstQueue.setSelectedValue(episodeName, true);
    }//GEN-LAST:event_btnQueueUpActionPerformed

    private void btnQueueDownActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnQueueDownActionPerformed
        int episodeToMove = lstQueue.getSelectedIndex();
        String episodeName = (String) lstQueue.getSelectedValue();
        String nextEpisode = (String) lstQueue.getModel().getElementAt(0);
        
        int episodeToFollow = (episodeToMove + 2) % lstQueue.getModel().getSize();
        show.moveEpisodeBefore((String) lstQueue.getModel().getElementAt(episodeToMove), (String) lstQueue.getModel().getElementAt(episodeToFollow));

        setNextEpisode(nextEpisode);
        lstQueue.setSelectedValue(episodeName, true);
    }//GEN-LAST:event_btnQueueDownActionPerformed

    private void btnRandomiseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRandomiseActionPerformed
        List<String> newQueue = show.getShowQueue();
        Collections.shuffle(newQueue);
        for (int i = 0; i < newQueue.size(); i++) {
            show.addEpisodeToEnd(newQueue.get(i));
            show.deleteEpisode(show.getShowQueue().getFirst());
        }
        
        updatePanel();
    }//GEN-LAST:event_btnRandomiseActionPerformed

    private void btnSortActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSortActionPerformed
        TVForm.sortShow(show);
        updatePanel();
    }//GEN-LAST:event_btnSortActionPerformed

    private void btnRemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoveActionPerformed
        List<String> episodesToRemove = lstQueue.getSelectedValuesList();
        
        for (String episodeToRemove : episodesToRemove) {
            show.deleteEpisode(episodeToRemove);
        }
        
        updatePanel();
    }//GEN-LAST:event_btnRemoveActionPerformed

    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
        String originalDirectory = show.getRootDirName();
        JFileChooser fc = new JFileChooser();
        fc.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);
        fc.setMultiSelectionEnabled(true);
        fc.setSelectedFile(new File(originalDirectory));

        if (fc.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
                File[] files = fc.getSelectedFiles();
                try {
                    for (File file : files) {
                        if (file.isDirectory()) {
                            for (File f : FileUtils.listFiles(new File(file.getCanonicalPath()), Show.ext, true)) {
                                if (show.getShowQueue().contains(f.getCanonicalPath())) {
                                    continue;
                                }
                                String nextEpisode = show.getShowQueue().peekFirst();
                                show.addEpisodeToEnd(f.getCanonicalPath());
                                show.setNextEpisode(nextEpisode);
                            }
                        } else if (file.isFile()) {
                            if (show.getShowQueue().contains(file.getCanonicalPath())) {
                                continue;
                            }
                            String nextEpisode = show.getShowQueue().peekFirst();
                            show.addEpisodeToEnd(file.getCanonicalPath());
                            show.setNextEpisode(nextEpisode);
                        }
                    }
                    updatePanel();
                }
                catch (IOException e) {
                    JOptionPane.showMessageDialog(this, "An error occured while accessing the file", "Error", JOptionPane.ERROR_MESSAGE);
                    return;
                }
        }
    }//GEN-LAST:event_btnAddActionPerformed

    private void updatePanel() {
        txtShowLength.setText(Integer.toString(show.getTimeSlotLength()));
        txtDirectory.setText(show.getRootDirName());
        txtNextEpisode.setText(show.peekNextEpisode());
        lstQueue.setListData(show.getShowQueue().toArray());
    }
    
    private void setNextEpisode(String nextEpisode) {
        show.setNextEpisode(nextEpisode);
        updatePanel();
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnBrowse;
    private javax.swing.JButton btnDown;
    private javax.swing.JButton btnNextEpisode;
    private javax.swing.JButton btnQueueDown;
    private javax.swing.JButton btnQueueUp;
    private javax.swing.JButton btnRandomise;
    private javax.swing.JButton btnRemove;
    private javax.swing.JButton btnSort;
    private javax.swing.JButton btnUp;
    private javax.swing.JButton btnUp1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JList lstQueue;
    private javax.swing.JTextField txtDirectory;
    private javax.swing.JTextField txtNextEpisode;
    private javax.swing.JTextField txtShowLength;
    // End of variables declaration//GEN-END:variables
}
