/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package tv;

import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.io.File;
import java.io.IOException;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import javax.swing.DefaultListModel;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JOptionPane;

/**
 *
 * @author Trent
 */
public class TVForm extends javax.swing.JFrame {

    /**
     * Creates new form TVForm
     */
    public TVForm() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        btnLoad = new javax.swing.JButton();
        btnShow = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        lstShows = new javax.swing.JList();
        btnSchedule = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblSchedule = new javax.swing.JTable();
        btnSave = new javax.swing.JButton();
        btnClearSchedule = new javax.swing.JButton();
        btnRemoveSchedule = new javax.swing.JButton();
        btnRemoveShow = new javax.swing.JButton();
        btnEditShow = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        btnLoad.setText("Load Schedule");
        btnLoad.setActionCommand("btnLoad");
        btnLoad.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLoadActionPerformed(evt);
            }
        });

        btnShow.setText("Add Show/s");
        btnShow.setActionCommand("btnAddShow");
        btnShow.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnShowActionPerformed(evt);
            }
        });

        lstShows.setModel(new DefaultListModel());
        lstShows.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                doubleClick(evt);
            }
        });
        jScrollPane1.setViewportView(lstShows);

        btnSchedule.setText("Add to Schedule");
        btnSchedule.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnScheduleActionPerformed(evt);
            }
        });

        tblSchedule.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {"0000", null, null, null, null, null, null, null},
                {"0030", null, null, null, null, null, null, null},
                {"0100", null, null, null, null, null, null, null},
                {"0130", null, null, null, null, null, null, null},
                {"0200", null, null, null, null, null, null, null},
                {"0230", null, null, null, null, null, null, null},
                {"0300", null, null, null, null, null, null, null},
                {"0330", null, null, null, null, null, null, null},
                {"0400", null, null, null, null, null, null, null},
                {"0430", null, null, null, null, null, null, null},
                {"0500", null, null, null, null, null, null, null},
                {"0530", null, null, null, null, null, null, null},
                {"0600", null, null, null, null, null, null, null},
                {"0630", null, null, null, null, null, null, null},
                {"0700", null, null, null, null, null, null, null},
                {"0730", null, null, null, null, null, null, null},
                {"0800", null, null, null, null, null, null, null},
                {"0830", null, null, null, null, null, null, null},
                {"0900", null, null, null, null, null, null, null},
                {"0930", null, null, null, null, null, null, null},
                {"1000", null, null, null, null, null, null, null},
                {"1030", null, null, null, null, null, null, null},
                {"1100", null, null, null, null, null, null, null},
                {"1130", null, null, null, null, null, null, null},
                {"1200", null, null, null, null, null, null, null},
                {"1230", null, null, null, null, null, null, null},
                {"1300", null, null, null, null, null, null, null},
                {"1330", null, null, null, null, null, null, null},
                {"1400", null, null, null, null, null, null, null},
                {"1430", null, null, null, null, null, null, null},
                {"1500", null, null, null, null, null, null, null},
                {"1530", null, null, null, null, null, null, null},
                {"1600", null, null, null, null, null, null, null},
                {"1630", null, null, null, null, null, null, null},
                {"1700", null, null, null, null, null, null, null},
                {"1730", null, null, null, null, null, null, null},
                {"1800", null, null, null, null, null, null, null},
                {"1830", null, null, null, null, null, null, null},
                {"1900", null, null, null, null, null, null, null},
                {"1930", null, null, null, null, null, null, null},
                {"2000", null, null, null, null, null, null, null},
                {"2030", null, null, null, null, null, null, null},
                {"2100", null, null, null, null, null, null, null},
                {"2130", null, null, null, null, null, null, null},
                {"2200", null, null, null, null, null, null, null},
                {"2230", null, null, null, null, null, null, null},
                {"2300", null, null, null, null, null, null, null},
                {"2330", null, null, null, null, null, null, null}
            },
            new String [] {
                "", "Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblSchedule.getColumnModel().getColumn(0).setPreferredWidth(45);
        tblSchedule.getColumnModel().getColumn(0).setMaxWidth(45);
        tblSchedule.getColumnModel().getColumn(0).setMinWidth(45);
        tblSchedule.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                scheduleShow(evt);
            }
        });
        jScrollPane2.setViewportView(tblSchedule);

        btnSave.setText("Save/Generate Schedule");
        btnSave.setActionCommand("btnSave");
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });

        btnClearSchedule.setText("Clear Schedule");
        btnClearSchedule.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearScheduleActionPerformed(evt);
            }
        });

        btnRemoveSchedule.setText("Remove from Schedule");
        btnRemoveSchedule.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoveScheduleActionPerformed(evt);
            }
        });

        btnRemoveShow.setText("Remove Show");
        btnRemoveShow.setActionCommand("btnAddShow");
        btnRemoveShow.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoveShowActionPerformed(evt);
            }
        });

        btnEditShow.setText("Edit Show");
        btnEditShow.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditShowActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 245, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSave, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 245, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnLoad, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 245, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnShow, javax.swing.GroupLayout.PREFERRED_SIZE, 245, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnClearSchedule, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnRemoveSchedule, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnSchedule, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnRemoveShow, javax.swing.GroupLayout.PREFERRED_SIZE, 245, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnEditShow, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 245, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 742, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(btnSave)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnLoad)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnShow)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnRemoveShow)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnEditShow)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 257, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnSchedule)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnRemoveSchedule)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnClearSchedule))
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 489, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>                        
    private Schedule schedule = new Schedule();
//    private final JFileChooser fc = new JFileChooser();

    private void btnShowActionPerformed(java.awt.event.ActionEvent evt) {                                        
        JFileChooser fc = new JFileChooser();
        fc.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        fc.setMultiSelectionEnabled(true);

        if (fc.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            try {
                File[] files = fc.getSelectedFiles();
                for (File file : files) {
                    String directory = file.getCanonicalPath();
                    String showName = file.getName();
                    Show show = new Show(showName, 1, directory);
                    sortShow(show);
                    schedule.addShow(showName, show);
                    String[] showList = Arrays.copyOf(schedule.allShows.keySet().toArray(), schedule.allShows.keySet().toArray().length, String[].class);
                    Arrays.sort(showList);
                    lstShows.setListData(showList);
                }
            }
            catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(this, "An integer was not entered, please enter an integer", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }
            catch (IOException e) {
                JOptionPane.showMessageDialog(this, "An error occured while accessing the file", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }
        } else {
        }
    }                                       

    private String enumerationString = " ~ part #";
    private void btnScheduleActionPerformed(java.awt.event.ActionEvent evt) {                                            
        String showName = (String)lstShows.getSelectedValue();
        if (showName == null) {
            JOptionPane.showMessageDialog(this, "You must first select a show to add to the Schedule", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        int row = 0;
        int col = 0;
        String[] options ;
        String selection;
        
        //Time Selection
        options = new String[tblSchedule.getRowCount()];
        for (int i = 0; i < tblSchedule.getRowCount(); i++) {
            options[i] = (String)tblSchedule.getValueAt(i, 0);
        }
        selection = (String)JOptionPane.showInputDialog(this, "Please Select Time", "Add show to Schedule", JOptionPane.QUESTION_MESSAGE, null, options, options[0]);
        if (selection == null) return;
        for (int i = 0; i < options.length; i++){
            if (options[i].equals(selection)) {
                row = i;
                break;
            }
        }
        
        //Day Selection
        options = new String[tblSchedule.getColumnCount()-1];
        for (int i = 0; i < tblSchedule.getColumnCount()-1; i++) {
            options[i] = tblSchedule.getColumnName(i+1);
        }
        selection = (String)JOptionPane.showInputDialog(this, "Please Select Day", "Add show to Schedule", JOptionPane.QUESTION_MESSAGE, null, options, options[0]);
        if (selection == null) return;
        for (int i = 0; i < options.length; i++){
            if (options[i].equals(selection)) {
                col = i+1;
                break;
            }
        }
        
        addShowToSchedule(showName, row, col);
    }                                           

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {                                        
        JFileChooser fc = new JFileChooser();
        generateSchedule();
        if (fc.showSaveDialog(this) == JFileChooser.APPROVE_OPTION) {
            try {
                File file = fc.getSelectedFile();
                FileIO.saveSchedule(schedule, file);
            } catch (IOException e) {
                JOptionPane.showMessageDialog(this, "Failed to save schedule", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }
        }
        JOptionPane.showMessageDialog(this, "Schedule saved successfully", "Success", JOptionPane.INFORMATION_MESSAGE);
    }                                       

    private void btnLoadActionPerformed(java.awt.event.ActionEvent evt) {                                        
        JFileChooser fc = new JFileChooser();
        if (fc.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            try {
                clearGUI();
                File file = fc.getSelectedFile();
                schedule = FileIO.loadSchedule(file);
                updateGUI();
            } catch (IOException e) {
                JOptionPane.showMessageDialog(this, "Failed to load schedule", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            } catch (ClassNotFoundException e) {
                JOptionPane.showMessageDialog(this, "Class not found", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }
        }
        else  {
            return;
        }
        JOptionPane.showMessageDialog(this, "Schedule loaded successfully", "Success", JOptionPane.INFORMATION_MESSAGE);
    }                                       

    private void btnClearScheduleActionPerformed(java.awt.event.ActionEvent evt) {                                                 
        if (JOptionPane.showConfirmDialog(this, "This will clear the entire schedule, are you certain you wish to proceed?", "Confirm clearing of schedule", JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {
            clearScheduleTable();
        }
    }                                                

    private void btnRemoveScheduleActionPerformed(java.awt.event.ActionEvent evt) {                                                  
        int row = tblSchedule.getSelectedRow();
        int col = tblSchedule.getSelectedColumn();
        if ((String)tblSchedule.getValueAt(row, col) == null) return;
        if (!((String)tblSchedule.getValueAt(row, col)).contains(enumerationString)) {
            tblSchedule.setValueAt(null, row, col);
            return;
        }
        
        String entry = ((String)tblSchedule.getValueAt(row, col)).substring(0, ((String)tblSchedule.getValueAt(row, col)).indexOf(enumerationString));
        if (!((String)tblSchedule.getValueAt(row, col)).substring(((String)tblSchedule.getValueAt(row, col)).length()-1).equals("1")) {
            JOptionPane.showMessageDialog(this, "Please select the first part of this shows instance to remove it", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        int i = 0;
        int newcol = col;
        while(((String)tblSchedule.getValueAt((row+i) % tblSchedule.getRowCount(),newcol)).startsWith(entry) && ((String)tblSchedule.getValueAt((row+i)% tblSchedule.getRowCount(),newcol)).contains(enumerationString) && ((String)tblSchedule.getValueAt((row+i) % tblSchedule.getRowCount(),newcol)).endsWith(enumerationString + Integer.toString(i+1))) { //not quite sound logic, but good enough.
            tblSchedule.setValueAt(null,(row+i) % tblSchedule.getRowCount(), newcol);
            i++;
            newcol = col+(row+i)/tblSchedule.getRowCount();
            while (newcol > tblSchedule.getColumnCount()) {
                newcol = newcol - 7;
            }
            if (tblSchedule.getValueAt((row+i) % tblSchedule.getRowCount(), newcol) == null) break;
        }
    }                                                 

    private void btnRemoveShowActionPerformed(java.awt.event.ActionEvent evt) {                                              
        String showName = (String)lstShows.getSelectedValue();
        if (showName == null) {
            JOptionPane.showMessageDialog(this, "You must first select a show to remove from the Schedule", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        if (JOptionPane.showConfirmDialog(this, "Warning, doing this will remove the show and all instances of it from the schedule.\nThis is non recoverable, and any queue on this show will be forgotten.\nDo you wish to proceed?", "Warning", JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE) != JOptionPane.YES_OPTION) {
            return;
        }
        
        removeShowFromScheduleTable(showName);
        schedule.removeShow(showName);
        lstShows.setListData(schedule.allShows.keySet().toArray());
    }                                             

    private void btnEditShowActionPerformed(java.awt.event.ActionEvent evt) {                                            
        String showName = (String)lstShows.getSelectedValue();
        editShow(showName);
    }                                           

    private void doubleClick(java.awt.event.MouseEvent evt) {                             
        if (evt.getClickCount() == 2) {
            editShow((String)lstShows.getSelectedValue());
        }
    }                            

    private void scheduleShow(java.awt.event.MouseEvent evt) {                              
        if (evt.getClickCount() == 2) {
            String[] shows = new String[lstShows.getModel().getSize()];
            if (shows.length==0) return;
            for (int i = 0; i < lstShows.getModel().getSize(); i++) {
                shows[i] = (String)lstShows.getModel().getElementAt(i);
            }
            String showName = (String)JOptionPane.showInputDialog(this, "Please select show to schedule at " + tblSchedule.getValueAt(tblSchedule.getSelectedRow(), 0)+ " on " + tblSchedule.getColumnName(tblSchedule.getSelectedColumn()), "Adding show to schedule", JOptionPane.PLAIN_MESSAGE, null, shows, shows[0]);
            if (showName == null) return;
            addShowToSchedule(showName, tblSchedule.getSelectedRow(), tblSchedule.getSelectedColumn());
        }
    }                             

    public static void sortShow(Show show) {
        List<String> newQueue = show.getShowQueue();
        Collections.sort(newQueue);
        for (int i = 0; i < newQueue.size(); i++) {
            show.addEpisodeToEnd(newQueue.get(i));
            show.deleteEpisode(show.getShowQueue().getFirst());
        }
    }
    
    private void addShowToSchedule(String showName, int row, int col) {
        //Check to make sure there's space to schedule this show in.
        int startrow = row;
        int startcol = col;
        int availableTime = 0;
        for (int i = 0; i < schedule.allShows.get(showName).getTimeSlotLength(); i++) {
            if (row >= tblSchedule.getRowCount()) {
                row = 0;
                col = (col + 1) % tblSchedule.getColumnCount();
                if (col == 0) {
                    col = 1; //the zeroth column is the times. Too lazy to implement row headers.
                }
            }
            if (tblSchedule.getValueAt(row, col) != null) {
                JOptionPane.showMessageDialog(this, "There is not enough room to schedule this show at this time.\nThis show requires " + schedule.allShows.get(showName).getTimeSlotLength() + " half hours and there are only " + availableTime + " half hours available at this time.", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }
            availableTime++;
            row++;
        }
        row = startrow;
        col = startcol;
        for (int i = 0; i < schedule.allShows.get(showName).getTimeSlotLength(); i++) {
            if (row >= tblSchedule.getRowCount()) {
                row = 0;
                col = (col + 1) % tblSchedule.getColumnCount();
                if (col == 0) col = 1; //the zeroth column is the times. Too lazy to implement row headers.
            }
            
            if (schedule.allShows.get(showName).getTimeSlotLength() > 1) {
                tblSchedule.setValueAt(showName + enumerationString + (i+1), row, col);
            } else if (schedule.allShows.get(showName).getTimeSlotLength() == 1) {
                tblSchedule.setValueAt(showName, row, col);
            }
            row++;
        }
    }
    
    private void editShow(String showName) {
        if (showName == null) {
            JOptionPane.showMessageDialog(this, "You must first select a show to edit from the Schedule", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        Show show = schedule.allShows.get(showName);
        JFrame frame = new JFrame("Edit Show");
        frame.add(new ShowPanel(show));
        frame.pack();
        frame.setVisible(true);
        frame.addWindowListener(new WindowAdapter() {

            public void windowClosing(WindowEvent we) {
                generateSchedule();
                clearGUI();
                updateGUI();
            }
        });
    }
    
    public void generateSchedule() {
        for (int row = 0; row < tblSchedule.getRowCount(); row++) {
            for (int col = 1; col < tblSchedule.getColumnCount(); col++) { //start at 1 because 0th is the times column, too lazy to implement row headers.
                String value = (String)tblSchedule.getValueAt(row, col);
                if (value == null) continue;
                if (value.contains(enumerationString)) { //remove any enumeration.
                    if (value.endsWith(enumerationString+"1")) {
                        value = value.substring(0, value.indexOf(enumerationString));
                        schedule.addToSched(value, col, Integer.parseInt((String) tblSchedule.getValueAt(row, 0)) / 100, Integer.parseInt((String) tblSchedule.getValueAt(row, 0)) % 100);
                    } else
                        continue;
                } else {
                    schedule.addToSched(value, col, Integer.parseInt((String)tblSchedule.getValueAt(row, 0)) / 100, Integer.parseInt((String)tblSchedule.getValueAt(row, 0)) % 100);
                }
            }
        }
    }
    
    private void clearScheduleTable() {
        for (int row = 0; row < tblSchedule.getRowCount(); row++) {
            for (int col = 1; col < tblSchedule.getColumnCount(); col++) {
                tblSchedule.setValueAt(null, row, col);
            }
        }
    }
    
    private void removeShowFromScheduleTable(String showName) {
        for(int row = 0; row < tblSchedule.getRowCount(); row++) {
            for (int col = 1; col < tblSchedule.getColumnCount(); col++) {
                String entry = (String)tblSchedule.getValueAt(row, col);
                if (entry == null) continue;
                if (entry.contains(enumerationString)) {
                    entry = entry.substring(0, entry.indexOf(enumerationString));
                }
                if (entry.equals(showName)) {
                    tblSchedule.setValueAt(null, row, col);
                }
            }
        }
    }
    
    //clears GUI ready to load new schedule
    private void clearGUI() {
        lstShows.removeAll();
        clearScheduleTable();
    }
    
    //updates GUI to reflect the schedule
    private void updateGUI() {
        String[] showList = Arrays.copyOf(schedule.allShows.keySet().toArray(), schedule.allShows.keySet().toArray().length, String[].class);
        Arrays.sort(showList);
        lstShows.setListData(showList);
        for (int day = 1; day < 8; day++) {
            for (int time = 0; time < tblSchedule.getRowCount(); time++) {
                int timeIndex = Integer.parseInt((String)tblSchedule.getValueAt(time, 0))/100 + Integer.parseInt((String)tblSchedule.getValueAt(time, 0)) % 100;
                if (schedule.sched.get(day)[timeIndex] == null) continue;
                String showName = schedule.sched.get(day)[timeIndex].getShowName();
                int row = time;
                int col = day;
                for (int i = 0; i < schedule.sched.get(day)[timeIndex].getTimeSlotLength(); i++) {
                    if (row >= tblSchedule.getRowCount()) {
                        row = 0;
                        col = (col + 1) % tblSchedule.getColumnCount();
                        if (col == 0) {
                            col = 1; //the zeroth column is the times. Too lazy to implement row headers.
                        }
                    }
                    if (schedule.sched.get(day)[timeIndex].getTimeSlotLength() > 1) {
                        tblSchedule.setValueAt(showName + enumerationString + (i + 1), row, col);
                    } else if (schedule.sched.get(day)[timeIndex].getTimeSlotLength() == 1) {
                        tblSchedule.setValueAt(showName, row, col);
                    }
                    row++;
                }
            }
        }
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TVForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TVForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TVForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TVForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new TVForm().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify                     
    private javax.swing.JButton btnClearSchedule;
    private javax.swing.JButton btnEditShow;
    private javax.swing.JButton btnLoad;
    private javax.swing.JButton btnRemoveSchedule;
    private javax.swing.JButton btnRemoveShow;
    private javax.swing.JButton btnSave;
    private javax.swing.JButton btnSchedule;
    private javax.swing.JButton btnShow;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JList lstShows;
    private javax.swing.JTable tblSchedule;
    // End of variables declaration                   
}
